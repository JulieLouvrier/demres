if(MAPE == TRUE){
MAPE <- demres_dist(table = table, metric = metric, measure = "MAPE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("Upper bound: ", round(MAPE[3],3)),
paste0("With initial vector: ", round(MAPE[2],3)),
paste0("Lower bound: ", round(MAPE[1],3))),
col = NA,
pch = NA,
cex = 0.8,
title = "MAPE",
box.lty = 0,
title.adj = 0.15
)
}
dev.off()
}
demres_plot <- function(metric,
table,
plotname = paste0(getwd(), "/plot_demres_", metric, ".pdf"),
rRMSE = FALSE,
RMSE = FALSE,
MAPE = FALSE) {
popname = table$popname
speciesName <- unique(table$popname)
tableStartYear <- table$timestep
## if grep[_TV] is null warning message and stop here
if(length(grep("_TV", names(table))) == 0){
stop("The function requires at least one metric
calculated with the time-varying approach")
}
# if (sum(is.na(table$)))
if(length(grep(metric, names(table))) == 0) {
stop("The metric you required can not be found in the table")
}
if (metric == "dr") {
name_metric = "Damping ratio"
#time varying
table_metric_initvect_TV <-
table[, grep(paste0(metric, "_TV"), colnames(table))]
#time constant
table_metric_initvect_TC <-
table[, grep(paste0(metric, "_TC"), colnames(table))]
miny = min(table_metric_initvect_TV, na.rm = T) - 0.4 * min(table_metric_initvect_TV, na.rm = T)
maxy = max(table_metric_initvect_TV, na.rm = T)  + 0.4 * max(table_metric_initvect_TV, na.rm = T)
# Define the vertices of the polygon
xinit <-
c(
min(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
max(tableStartYear,na.rm = T),
min(tableStartYear, na.rm = T)
)
yinit <-
c(
min(table_metric_initvect_TV, na.rm = T),
min(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T)
)
# Create a plot
pdf(plotname)
par(mar = c(5, 4, 4, 10), xpd = TRUE)
plot(
tableStartYear,
table_metric_initvect_TV,
type = "n",
ylim = c(miny, maxy),
main = paste0(name_metric, " of ", unique(popname), " population"),
xlab = "Time step",
ylab = paste0(name_metric)
)  # Set limits to make the square more visually clear
points(
tableStartYear,
table_metric_initvect_TV,
type = "p",
pch = 19,
col = "purple",
ylim = c(miny, maxy)
)
lines(
tableStartYear,
table_metric_initvect_TC,
type = "l",
lwd = 1,
col = "purple",
ylim = c(miny, maxy)
)
# Draw the polygons
polygon(xinit, yinit, col = rgb(1, 0, 1, 0.3), border = FALSE)
#legend
legend(
"topright",
inset = c(-0.4, 0),
legend = c("Damping ratio"),
col = c("purple"),
lty = c(1),
cex = 0.8,
title = "Time-Constant",
box.lty = 0
)
#legend
legend(
"topright",
inset = c(-0.4, 0.2),
legend = c("Damping ratio"),
col = c("purple"),
pch = c(19),
cex = 0.8,
title = "Time-Varying",
box.lty = 0,
title.adj = 0.15
)
if(RMSE == TRUE){
RMSE_dr <- demres_dist(table = table, metric = metric, measure = "RMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("RMSE dr: ", round(RMSE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)
text(y = maxy, x = max(tableStartYear)-2, label = paste0("RMSE_dr = ", round(RMSE_dr,3)))
}
if(rRMSE == TRUE){
rRMSE_dr <- demres_dist(table = table, metric = metric, measure = "rRMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("rRMSE dr: ", round(rRMSE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)    }
if(MAPE == TRUE){
MAPE_dr <- demres_dist(table = table, metric = metric, measure = "MAPE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("MAPE dr: ", round(MAPE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)    }
dev.off()
}
else{
plot_general(metric = metric, table = table, plotname = plotname, RMSE = RMSE, rRMSE = rRMSE, MAPE = MAPE)
}
}
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
?demres
setwd("./demres")
document()
build()
document()
rm(list = c("calc_resilience", "demres", "demres_plot"))
setwd("./demres")
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
require("demres")
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
library(demres)
detach("package:demres", unload = TRUE)
remove.packages("demres")
install_github("JulieLouvrier/demres")
# setwd("..") #to run once the package is ready
install("../demres")
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
# setwd("..") #to run once the package is ready
install("../demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
# setwd("..") #to run once the package is ready
install("../demres")
?demres::calc_resilience
?demres::demres_dist
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
install_github("JulieLouvrier/demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
install_github("JulieLouvrier/demres")
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
?demres
??demres
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
library(demres)
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
#setwd("C:/Users/louvrier/Documents/WILDER_Package_dir")
# create("demres")
setwd("./demres")
document()
build()
# check() #for later check(cran = TRUE)
# load_all(path = "../demres")
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
# setwd("..") #to run once the package is ready
install("../demres")
??demres::plot_general
??demres::RMSE
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
document()
build()
demres::RMSE()
demres::RMSE
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
setwd("./demres")
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
??demres::MAPE
remove.packages("demres")
#error when ?demres:: have to restart the Rstudio session
#devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
#error when ?demres:: have to restart the Rstudio session
#devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
devtools::load_all(".")
devtools::load_all(".")
?demres
devtools::load_all(".")
?demres
pkgbuild::check_build_tools(debug = TRUE)
?dplyr::data_frame
devtools::load_all(".")
comadre <- cdb_fetch("comadre")
comadre
str(comadre)
str(comadre, max.level = 0)
str(comadre, max.level = 1)
str(comadre, max.level = 2)
filter.CompadreDB
Rcompadre:::filter.CompadreDB
blue_crane <- comadre |> filter(SpeciesAccepted  == "Anthropoides paradiseus")
Rcompadre::filter.CompadreDB
?Rcompadre::new
?new
comadre[comadre@data$SpeciesAccepted  == "Anthropoides paradiseus", ]
blue_crane_matA <- matA(blue_crane)
devtools::load_all(".")
comadre <- cdb_fetch("comadre")
blue_crane <- comadre[comadre@data$SpeciesAccepted  == "Anthropoides paradiseus", ]
blue_crane_matA <- matA(blue_crane)
Cranevec1 <- runif(5)
Cranevec1 <- Cranevec1/sum(Cranevec1) #scales the vec to sum to 1
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
popdemo::isIrreducible
popdemo::isPrimitive
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
devtools::load_all(".")
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
character(0)
length(character(0))
devtools::load_all(".")
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
temp_list
temp_list[[1]]
attributes(temp_list[[1]])
attributes(temp_list[[2]])
attributes(temp_list[[3]])
attributes(temp_list[[4]])
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
temp_list
temp_list[[1]]
attributes(temp_list[[1]])
devtools::load_all(".")
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
temp_list
temp_list[[1]]
attributes(temp_list[[1]])
attributes(temp_list[[1]], "msg")
attr(temp_list[[1]], "msg")
sapply(temp_list, \(e) attr(e, "msg"))
temp_list
table(sapply(temp_list, function(e) attr(e, "msg")))
devtools::load_all(".")
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
devtools::load_all(".")
BC_TVTC_demres <-
demres(
blue_crane_matA,
metrics = "all",
bounds = TRUE,
initvec = Cranevec1,
popname = "blue crane",
time = "both"
)
temp_list
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = initvec)
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = list(initvec))
temp_list2
is.list(initvec)
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = list(list(initvec)))
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = list(initvec))
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = list(initvec), SIMPLIFY = FALSE)
temp_list2
temp_list2 <-
mapply(function(A,X) {
calc_resilience(A,
metrics = metrics,
bounds = bounds,
initvec = X,
popname = popname)
}, A = listA, X = list(initvec), SIMPLIFY = TRUE)
temp_list2
str(temp_list2 )
print.AsIs(temp_list2 )
is.matrix(temp_list2)
class(temp_list2)
?MAPE
library(demres)
devtools::load_all(".")
?MAPE
methods(plot)
ls()
ls(envir = pacakge:demres)
ls(envir = package:demres)
ls(envir = "package:demres")
ls(envir = as.environment("package:demres"))
?dplyr
?dplyr::dplyr
tibble
tibble::tibble
?tibble::tibble
?tibble::`tibble-package`
