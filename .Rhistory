table_metric_lwr_TV <- rep(NA, nrow(table))
ltydefault = 1
legenddefault = "With initial vector"
coldefault = "purple"
pchdefault = 19
}
else {
if(length(table_metric_initvect_TV) == 0){
table_metric_initvect_TV <- rep(NA, nrow(table))
ltydefault = c(1)
legenddefault = c("Lower bound")
coldefault = c("blue")
pchdefault = c(19)
}
else {
ltydefault = c(1, 1)
legenddefault = c("With initial vector", "Lower bound")
coldefault = c("purple", "blue")
pchdefault = c(19, 19)
}
}
}
else{
if(length(table_metric_lwr_TV) == 0) {
table_metric_lwr_TV <- rep(NA, nrow(table))
if(length(table_metric_initvect_TV) == 0) {
table_metric_initvec_TV <- rep(NA, nrow(table))
ltydefault = c(1)
legenddefault = c("Upper bound")
coldefault = c("red")
pchdefault = c(19)
}
else {
ltydefault = c(1, 1)
legenddefault = c("Upper bound", "With initial vector")
coldefault = c("red", "purple")
pchdefault = c(19, 19)
}
}
else{
if(length(table_metric_initvect_TV) == 0) {
table_metric_initvec_TV <- rep(NA, nrow(table))
ltydefault = c(1, 1)
legenddefault = c("Upper bound", "Lower bound")
coldefault = c("red", "blue")
pchdefault = c(19, 19)
}
else {
ltydefault = c(1, 1,1)
legenddefault = c("Upper bound", "With initial vector", "Lower bound")
coldefault = c("red","purple", "blue")
pchdefault = c(19, 19, 19)
}
}
}
if(length(table_metric_upr_TC) == 0){
table_metric_upr_TC <- rep(NA, nrow(table))
}
if(length(table_metric_lwr_TC) == 0){
table_metric_lwr_TC <- rep(NA, nrow(table))
}
if(length(table_metric_initvect_TC) == 0){
table_metric_initvect_TC <- rep(NA, nrow(table))
}
# Define the vertices of the polygon
xup <-
c(
min(tableStartYear,na.rm = T),
max(tableStartYear, na.rm = T),
max(tableStartYear,na.rm = T),
min(tableStartYear, na.rm = T)
)
if(length(which(is.na(table_metric_upr_TV))) == nrow(table)) {
yup = c(NA, NA, NA, NA)
}
else{
yup <- #here
c(
min(table_metric_upr_TV, na.rm = T),
min(table_metric_upr_TV, na.rm = T),
max(table_metric_upr_TV, na.rm = T),
max(table_metric_upr_TV, na.rm = T)
)
}
xlow <-
c(
min(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
min(tableStartYear, na.rm = T)
)
if(length(which(is.na(table_metric_lwr_TV))) == nrow(table)) {
ylow = c(NA, NA, NA, NA)
}
else{
ylow <-
c(
min(table_metric_lwr_TV, na.rm = T),
min(table_metric_lwr_TV, na.rm = T),
max(table_metric_lwr_TV, na.rm = T),
max(table_metric_lwr_TV, na.rm = T)
)
}
xinit <-
c(
min(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
min(tableStartYear, na.rm = T)
)
if(length(which(is.na(table_metric_initvect_TV))) == nrow(table)) {
yinit = c(NA, NA, NA, NA)
}
else{
yinit <-
c(
min(table_metric_initvect_TV, na.rm = T),
min(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T)
)
}
# Create a plot
pdf(plotname)
par(mar = c(5, 4, 4, 10), xpd = TRUE)
plot(
tableStartYear,
table_metric_upr_TV,
type = "n",
ylim = c(miny, maxy),
main = paste0(name_metric, " of ", unique(popname), " population"),
xlab = "Time step",
ylab = paste0(name_metric)
)  # Set limits to make the square more visually clear
points(
tableStartYear,
table_metric_upr_TV,
type = "p",
pch = 19,
col = "red",
ylim = c(miny, maxy)
)
points(
tableStartYear,
table_metric_lwr_TV,
type = "p",
pch = 19,
col = "blue",
ylim = c(miny, maxy)
)
points(
tableStartYear,
table_metric_initvect_TV,
type = "p",
pch = 19,
col = "purple",
ylim = c(miny, maxy)
)
lines(
tableStartYear,
table_metric_upr_TC,
type = "l",
lwd = 1,
col = "red",
ylim = c(miny, maxy)
)
lines(
tableStartYear,
table_metric_lwr_TC,
type = "l",
lwd = 1,
col = "blue",
ylim = c(miny, maxy)
)
lines(
tableStartYear,
table_metric_initvect_TC,
type = "l",
lwd = 1,
col = "purple",
ylim = c(miny, maxy)
)
# Draw the polygons
polygon(xup, yup, col = rgb(1, 0, 0, 0.3), border = FALSE)
polygon(xlow, ylow, col = rgb(0, 0, 1, 0.3), border = FALSE)
polygon(xinit, yinit, col = rgb(1, 0, 1, 0.3), border = FALSE)
#legend
if(!length(grep("_TC", names(table))) == 0){
legend(
"topright",
inset = c(-0.4, 0),
legend = legenddefault,
col = coldefault,
lty = ltydefault,
cex = 0.8,
title = titleTCdefault,
box.lty = 0
)
}
#legend
legend(
"topright",
inset = c(-0.4, 0.2),
legend = legenddefault,
col = coldefault,
pch = pchdefault,
cex = 0.8,
title = titleTVdefault,
box.lty = 0,
title.adj = 0.15
)
if(RMSE == TRUE){
RMSE <- demres_dist(table = table, metric = metric, measure = "RMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("Upper bound: ", round(RMSE[3],3)),
paste0("With initial vector: ", round(RMSE[2],3)),
paste0("Lower bound: ", round(RMSE[1],3))),
col = NA,
pch = NA,
cex = 0.8,
title = "RMSE",
box.lty = 0,
title.adj = 0.15
)
}
if(rRMSE == TRUE){
rRMSE <- demres_dist(table = table, metric = metric, measure = "rRMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("Upper bound: ", round(rRMSE[3],3)),
paste0("With initial vector: ", round(rRMSE[2],3)),
paste0("Lower bound: ", round(rRMSE[1],3))),
col = NA,
pch = NA,
cex = 0.8,
title = "rRMSE",
box.lty = 0,
title.adj = 0.15
)
}
if(MAPE == TRUE){
MAPE <- demres_dist(table = table, metric = metric, measure = "MAPE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("Upper bound: ", round(MAPE[3],3)),
paste0("With initial vector: ", round(MAPE[2],3)),
paste0("Lower bound: ", round(MAPE[1],3))),
col = NA,
pch = NA,
cex = 0.8,
title = "MAPE",
box.lty = 0,
title.adj = 0.15
)
}
dev.off()
}
demres_plot <- function(metric,
table,
plotname = paste0(getwd(), "/plot_demres_", metric, ".pdf"),
rRMSE = FALSE,
RMSE = FALSE,
MAPE = FALSE) {
popname = table$popname
speciesName <- unique(table$popname)
tableStartYear <- table$timestep
## if grep[_TV] is null warning message and stop here
if(length(grep("_TV", names(table))) == 0){
stop("The function requires at least one metric
calculated with the time-varying approach")
}
# if (sum(is.na(table$)))
if(length(grep(metric, names(table))) == 0) {
stop("The metric you required can not be found in the table")
}
if (metric == "dr") {
name_metric = "Damping ratio"
#time varying
table_metric_initvect_TV <-
table[, grep(paste0(metric, "_TV"), colnames(table))]
#time constant
table_metric_initvect_TC <-
table[, grep(paste0(metric, "_TC"), colnames(table))]
miny = min(table_metric_initvect_TV, na.rm = T) - 0.4 * min(table_metric_initvect_TV, na.rm = T)
maxy = max(table_metric_initvect_TV, na.rm = T)  + 0.4 * max(table_metric_initvect_TV, na.rm = T)
# Define the vertices of the polygon
xinit <-
c(
min(tableStartYear, na.rm = T),
max(tableStartYear, na.rm = T),
max(tableStartYear,na.rm = T),
min(tableStartYear, na.rm = T)
)
yinit <-
c(
min(table_metric_initvect_TV, na.rm = T),
min(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T),
max(table_metric_initvect_TV, na.rm = T)
)
# Create a plot
pdf(plotname)
par(mar = c(5, 4, 4, 10), xpd = TRUE)
plot(
tableStartYear,
table_metric_initvect_TV,
type = "n",
ylim = c(miny, maxy),
main = paste0(name_metric, " of ", unique(popname), " population"),
xlab = "Time step",
ylab = paste0(name_metric)
)  # Set limits to make the square more visually clear
points(
tableStartYear,
table_metric_initvect_TV,
type = "p",
pch = 19,
col = "purple",
ylim = c(miny, maxy)
)
lines(
tableStartYear,
table_metric_initvect_TC,
type = "l",
lwd = 1,
col = "purple",
ylim = c(miny, maxy)
)
# Draw the polygons
polygon(xinit, yinit, col = rgb(1, 0, 1, 0.3), border = FALSE)
#legend
legend(
"topright",
inset = c(-0.4, 0),
legend = c("Damping ratio"),
col = c("purple"),
lty = c(1),
cex = 0.8,
title = "Time-Constant",
box.lty = 0
)
#legend
legend(
"topright",
inset = c(-0.4, 0.2),
legend = c("Damping ratio"),
col = c("purple"),
pch = c(19),
cex = 0.8,
title = "Time-Varying",
box.lty = 0,
title.adj = 0.15
)
if(RMSE == TRUE){
RMSE_dr <- demres_dist(table = table, metric = metric, measure = "RMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("RMSE dr: ", round(RMSE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)
text(y = maxy, x = max(tableStartYear)-2, label = paste0("RMSE_dr = ", round(RMSE_dr,3)))
}
if(rRMSE == TRUE){
rRMSE_dr <- demres_dist(table = table, metric = metric, measure = "rRMSE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("rRMSE dr: ", round(rRMSE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)    }
if(MAPE == TRUE){
MAPE_dr <- demres_dist(table = table, metric = metric, measure = "MAPE")
legend(
"topright",
inset = c(-0.4, 0.4),
legend = c(paste0("MAPE dr: ", round(MAPE_dr,3))),
col = NA,
pch = NA,
cex = 0.8,
title = NA,
box.lty = 0,
title.adj = 0.15
)    }
dev.off()
}
else{
plot_general(metric = metric, table = table, plotname = plotname, RMSE = RMSE, rRMSE = rRMSE, MAPE = MAPE)
}
}
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
?demres
setwd("./demres")
document()
build()
document()
rm(list = c("calc_resilience", "demres", "demres_plot"))
setwd("./demres")
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
require("demres")
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
library(demres)
detach("package:demres", unload = TRUE)
remove.packages("demres")
install_github("JulieLouvrier/demres")
# setwd("..") #to run once the package is ready
install("../demres")
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
# setwd("..") #to run once the package is ready
install("../demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
# setwd("..") #to run once the package is ready
install("../demres")
?demres::calc_resilience
?demres::demres_dist
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
install_github("JulieLouvrier/demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
install_github("JulieLouvrier/demres")
remove.packages("demres")
# setwd("..") #to run once the package is ready
install("../demres")
?demres
??demres
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
library(demres)
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
#setwd("C:/Users/louvrier/Documents/WILDER_Package_dir")
# create("demres")
setwd("./demres")
document()
build()
# check() #for later check(cran = TRUE)
# load_all(path = "../demres")
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
install_github("JulieLouvrier/demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
remove.packages("demres")
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
library("devtools")
# install.packages("devtools")
# devtools::install_github("klutometis/roxygen")
library("roxygen2")
# setwd("..") #to run once the package is ready
install("../demres")
??demres::plot_general
??demres::RMSE
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
document()
build()
demres::RMSE()
demres::RMSE
#error when ?demres:: have to restart the Rstudio session
devtools::unload("demres") #run that to unload when I modify functions
setwd("./demres")
document()
build()
# setwd("..") #to run once the package is ready
install("../demres")
