% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/demres_dist_function.R
\name{demres_dist}
\alias{demres_dist}
\title{Calculates distance between the time-varying resilience metric and the time-
constant one}
\usage{
demres_dist(table, metric, measure)
}
\arguments{
\item{table}{A dataframe containing all the resilience metrics calculated
with the demres function}

\item{metric:}{"reac": Reactivity: first-timestep amplification
and first-timestep attenuation for a population matrix
projection model.
"inertia": Population inertia for a population
matrix projection model.
"dr": Damping ratio of a given population
matrix projection model.
"maxamp": Maximal amplification for a population
matrix projection model.
"maxatt": Maximal attenuation for a population
matrix projection model.}

\item{measure:}{"RMSE": calculates the RMSE (sqrt(mean((TV-TC)^2))
with TV: the time-Varying resilience metric and TC the time constant one)
"rRMSE":calculates the relative RMSE
(sqrt(mean((TV-TC)^2)) / sd(TV) with TV: the time-Varying resilience metric
and TC the time constant )
"MAPE": calculates the MAPE (mean(abs(TV - TC)) with TV:
the time-Varying resilience metric and TC the time constant)
"all": calculates all of the above measures}
}
\value{
A dataframe displaying the mdistance measures for the selected metric
}
\description{
\code{demres_dist} Calculates distance between the time-varying resilience
metric and the time-constant one
}
\examples{
# load data
comadre <- cdb_fetch("comadre")

#selecting the blue crane
blue_crane <- comadre[comadre@data$SpeciesAccepted  == "Anthropoides paradiseus", ]

#extracting matrices
blue_crane_matA <- matA(blue_crane)

# simulate an initial vector
Cranevec1 <- runif(5)
Cranevec1 <- Cranevec1/sum(Cranevec1) #scales the vec to sum to 1


BC_TVTC_demres <-
  demres(
    blue_crane_matA,
    metrics = "all",
    bounds = TRUE,
    initvec = Cranevec1,
    popname = "blue crane",
    time = "both"
  )


dist_BC <- demres_dist(table = BC_TVTC_demres, metric = "inertia",
measure = "all")

}
